{{>partial_header}}

using System;
using System.Text.Json;

namespace {{packageName}}.{{modelPackage}}
{
    /// <summary>
    ///  Abstract base class for oneOf, anyOf schemas in the OpenAPI specification
    /// </summary>
    {{>visibility}} abstract partial class AbstractOpenAPISchema
    {
        /// <summary>
        ///  Custom JSON serializer
        /// </summary>
        static public readonly JsonSerializerOptions SerializerOptions = new JsonSerializerOptions
        {
            // System.Text.Json does not have an equivalent to AllowNonPublicDefaultConstructor,
            // so handle non-public constructors manually if needed.
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            PropertyNameCaseInsensitive = false,
            IgnoreReadOnlyFields = false,
            IgnoreReadOnlyProperties = false,
        };

        /// <summary>
        ///  Custom JSON serializer for objects with additional properties
        /// </summary>
        static public readonly JsonSerializerOptions AdditionalPropertiesSerializerOptions = new JsonSerializerOptions
        {
            // System.Text.Json does not have an equivalent to AllowNonPublicDefaultConstructor,
            // so handle non-public constructors manually if needed.
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            PropertyNameCaseInsensitive = false,
            IgnoreReadOnlyFields = false,
            IgnoreReadOnlyProperties = false,
        };

        /// <summary>
        /// Gets or Sets the actual instance
        /// </summary>
        public abstract Object ActualInstance { get; set; }

        /// <summary>
        /// Gets or Sets IsNullable to indicate whether the instance is nullable
        /// </summary>
        public bool IsNullable { get; protected set; }

        /// <summary>
        /// Gets or Sets the schema type, which can be either `oneOf` or `anyOf`
        /// </summary>
        public string SchemaType { get; protected set; }

        /// <summary>
        /// Converts the instance into JSON string.
        /// </summary>
        public abstract string ToJson();
    }
}
